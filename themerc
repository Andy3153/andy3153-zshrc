#!/usr/bin/env zsh
##
## themerc by Andy3153
## created 26/10/20 ~ 15:24:04
## created 23/08/21 ~ 00:13:35
##
## This is a secondary Zsh configuration file responsible for configuring themes.
##
## Use 'print -P' to test prompt escapes when making a new theme
##

# Variables
  # Fallback colors
    _promptColorUID=yellow
    _promptColorSSH=gray
    _promptColorGit=white

  # Special characters
    _charPowerlineArrowLeft=$'\ue0b2'
    _charPowerlineArrowRight=$'\ue0b0'

# Functions for the theme setting
  # Check the UID of the currently running user
    function _themercCheckUID()
    {
        if [ $UID = 0 ]
          then _promptColorUID=yellow
          else _promptColorUID=blue
        fi
    }

  # Check if session is running through SSH
    function _themercCheckSSH()
    {
        if [ -z $SSH_CONNECTION ]
          then _promptColorSSH=white
          else _promptColorSSH=yellow
        fi
    }

  # Git branch
    function _themercCheckGitUncommitted()
    {
	if [ $(git status --porcelain=v1 2>/dev/null | wc -l) == 0 ]
	  then _promptColorGit=green
	  else _promptColorGit=yellow
  	fi
    }


# Functions for the themes
  # Colorful theme
    function _setColorful()
    {
        _themercCheckUID
        export PS1="%B%F{$_promptColorUID}[ %n@%m ]%f%b %F{white}:%f %F{yellow}%~%f %B%F{cyan}>%b%f "
        export RPS1="%B%F{cyan}<%b%f %D{%d/%m/%y ~ %T}"
    }

  # Blocks theme
    function _setBlocks()
    {
        _themercCheckUID
        emojis=('☺' '☻' '🌜' '🐭' '🐮' '🐱' '🐵' '😀' '😁' '😂' '😃' '😄' '😅' '😆' '😇' '😈' '😉' '😊' '😋' '😌' '😍' '😎' '😏' '😗' '😘' '😙' '😚' '😛' '😜' '😝' '😴' '😵' '😶' '😷' '😸' '😹' '😺' '😻' '😼' '😽' '😾' '😿' '🙀' '🙃' '🤖')
        export PS1="%(?.%K{green}%F{black} √ %f%k.%K{red}%F{black} × %f%k)%K{black} ${emojis[$(($RANDOM%43))]} %n@%M %k%K{$_promptColorUID}%F{black} > %f%k "
        export RPS1="%K{$_promptColorUID}%F{black} 🗁 %(5~|%-2~/…/%2~|%4~)   %f%k%K{yellow}%F{black} 🗏 %h %f%k"
    }

  # Blocks Dark theme
    function _setBlocksDark()
    {
        _themercCheckUID
        export PS1="%(?.%K{black}%F{green} √ %f%k.%K{black}%F{red} × %f%k)%K{black}%F{$_promptColorUID}| %n %k%K{black}| > %f%k "
        export RPS1="%K{black}%F{$_promptColorUID} 🗁  %(5~|%-2~/…/%2~|%4~) |%f%k%K{black}%F{yellow} 🗏 %h %f%k"
    }

  # Blocks v2 theme
    function _setBlocksv2()
    {
        _themercCheckUID
        export PS1="%K{black}%F{$_promptColorUID}\%(?.%K{black}%F{green} √ %f%k.%K{black}%F{red} × %f%k)%K{black}%F{$_promptColorUID}\ %n@%m %k%K{black}\ > \%f%k "
        export RPS1="%K{black}%F{$_promptColorUID}/ 🗁  %(5~|%-2~/…/%2~|%4~) /%f%k%K{black}%F{yellow} 🗏 %h %F{$_promptColorUID}/"
    }

  # KeepItSimple
    function _setKeepItSimple()
    {
        _themercCheckUID
        export PS1="%F{$_promptColorUID}\ %n@%m \ %(?.%F{green}.%F{red})> %f%F{$_promptColorUID}\%f "
        export RPS1="%F{$_promptColorUID} / %(5~|%-2~/…/%2~|%4~) /%f%F{yellow} %h %F{$_promptColorUID}/"
    }

  # Arrows theme; 26/10/20 ~ 17:03:28
    function _setArrows()
    {
        _themercCheckUID
        _themercCheckSSH
        export PS1="%(?.%K{green}%F{black} √ %F{green}%K{black}$_charPowerlineArrowRight%f%k.%K{red}%F{black} × %F{red}%K{black}$_charPowerlineArrowRight%f%k)%K{black} %F{$_promptColorSSH}%n@%M %F{black}%K{$_promptColorUID}$_charPowerlineArrowRight%k%K{$_promptColorUID}%F{black} > %k%F{$_promptColorUID}$_charPowerlineArrowRight%f%k "
        export RPS1="%F{$_promptColorUID}$_charPowerlineArrowLeft%K{$_promptColorUID}%F{black} 🗀 %(5~|%-2~/…/%2~|%4~)%F{black}%K{$_promptColorUID} $_charPowerlineArrowLeft %f%k%K{black}%F{white} 🗏 %h %f%k"
    }

    function _setArrows2Line()
    {
	_themercCheckUID
	_themercCheckSSH

        function prompt-length() {
          emulate -L zsh
          local -i COLUMNS=${2:-COLUMNS}
          local -i x y=${#1} m
          if (( y )); then
            while (( ${${(%):-$1%$y(l.1.0)}[-1]} )); do
              x=y
              (( y *= 2 ))
            done
            while (( y > x + 1 )); do
              (( m = x + (y - x) / 2 ))
              (( ${${(%):-$1%$m(l.x.y)}[-1]} = m ))
            done
            fi
            typeset -g REPLY=$x
}

	function fill-line() {
          emulate -L zsh
          prompt-length $1
          local -i left_len=REPLY
          prompt-length $2 9999
          local -i right_len=REPLY
          local -i pad_len=$((COLUMNS - left_len - right_len - ${ZLE_RPROMPT_INDENT:-1}))
          if (( pad_len < 1 )); then
            # Not enough space for the right part. Drop it.
            typeset -g REPLY=$1
          else
            local pad=${(pl.$pad_len.. .)}  # pad_len spaces
            typeset -g REPLY=${1}${pad}${2}
          fi
}

	_topLeft="%(?.%K{green}%F{black} √ %F{green}%K{black}$_charPowerlineArrowRight%f%k.%K{red}%F{black} × %F{red}%K{black}$_charPowerlineArrowRight%f%k)%K{black} %F{$_promptColorSSH}%n@%M %F{black}%K{$_promptColorUID}$_charPowerlineArrowRight%k%K{$_promptColorUID}%F{black} master %k%F{$_promptColorUID}$_charPowerlineArrowRight%f%k"
	_topright="%F{$_promptColorUID}$_charPowerlineArrowLeft%K{$_promptColorUID}%F{black} 🗀 %(5~|%-2~/…/%2~|%4~)%F{black}%K{$_promptColorUID} $_charPowerlineArrowLeft %f%k%K{black}%F{white} 🗏 %h %f%k"
	_bottomLeft="%k%K{$_promptColorUID}%F{black} > %k%F{$_promptColorUID}$_charPowerlineArrowRight%f%k "
	_bottomRight="%F{$_promptColorUID}$_charPowerlineArrowLeft%K{$_promptColorUID}%F{black} %T%f "

        fill-line "$_topLeft" "$_topRight"

	export PS1=$REPLY$'\n'$_bottomLeft
	export RPS1=$_bottomRight
    }


## End of file.
